I have some problem, check why i have this Error: gcc -Wall -Wextra -Werror -c basic_functions.c -o obj/basic_functions.o
gcc -Wall -Wextra -Werror -c input_utils.c -o obj/input_utils.o
gcc -Wall -Wextra -Werror -c init.c -o obj/init.o
init.c:39:37: error: expression result unused [-Werror,-Wunused-value]
    if (pthread_mutex_init(&(table->meal_check, NULL)))
                             ~~~~~  ^~~~~~~~~~
init.c:39:28: error: cannot take the address of an rvalue of type 'void *'
    if (pthread_mutex_init(&(table->meal_check, NULL)))
                           ^ ~~~~~~~~~~~~~~~~~~~~~~~
init.c:44:48: error: expression result unused [-Werror,-Wunused-value]
        if (pthread_mutex_init(&(table->forks[i], NULL)))
                                 ~~~~~~~~~~~~ ~^
init.c:44:32: error: cannot take the address of an rvalue of type 'void *'
        if (pthread_mutex_init(&(table->forks[i], NULL)))
                               ^ ~~~~~~~~~~~~~~~~~~~~~
4 errors generated.
make: *** [Makefile:31: obj/init.o] Error 1 

SOURCE CODE:

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   basic_functions.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: sueno-te <sueno-te@student.42sp.org.br>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:35:54 by sueno-te          #+#    #+#             */
/*   Updated: 2024/11/13 11:01:27 by sueno-te         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

# include "philosopher.h"

int isspace(int c) {
    if (c == ' ' || c == '\t' || c == '\n' || 
        c == '\r' || c == '\v' || c == '\f') 
    {
        return (0);
    }
    else 
    {
        return (-1);
    }
}

int ft_atoi(char *str)
{
	unsigned long int	    number;
	int							i;
	
	i = 0;
	while (isspace(str[i]))
        i++;
	number = 0;
	while (str[i] && (str[i] >= '0' && str[i] <= '9'))
	{
		number = number * 10 + (str[i] - '0');
		i++;
	}
	if (number > INT_MAX)
		return (-1);
    i = (int)number;
	return (i);
}

int only_digits(char *str)
{
	int	i;

	i = 0;
    if (str[0] == '\0')
        return (-1);
    while (isspace(str[i]))
	{
			i++;
	}
	while (str[i])
	{
		if (str[i] < '0' || str[i] > '9')
			return (0);
		i++;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: sueno-te <sueno-te@student.42sp.org.br>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 16:58:32 by sueno-te          #+#    #+#             */
/*   Updated: 2024/11/13 10:50:38 by sueno-te         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philosopher.h"

void philos_setter(t_table *table)
{
    int guests;
    int i;
    
    guests = table->number_of_philosophers;
    i = guests;
    while (--i >= 0)
    {
        table->philosopher[i].id = i;
        table->philosopher[i].eat_count = 0;
        table->philosopher[i].left_fork = i;
        table->philosopher[i].right_fork = (i+1) % guests;
        table->philosopher[i].last_meal = 0;
        table->philosopher[i].table = table;
    }
}

int init_table_safeguard(t_table *table)
{
    int i;
    
    if (pthread_mutex_init(&(table->writing), NULL))
        return (1);
    if (pthread_mutex_init(&(table->meal_check, NULL)))
        return (1);
    i = table->number_of_philosophers;
    while (--i >= 0)
    {
        if (pthread_mutex_init(&(table->forks[i], NULL)))
            return (1);
    }
    return (0);
}

int basic_rules_checker(t_table *table) {
    if (table->number_of_philosophers < 2) {
        fprintf(stderr, "Error: Need at least 2 philosophers.\n");
        return (1);
    }
    if (table->time_to_eat < 0) {
        fprintf(stderr, "Error: time_to_eat cannot be negative.\n");
        return (1);
    }
    if (table->time_to_sleep < 0) {
        fprintf(stderr, "Error: time_to_sleep cannot be negative.\n");
        return (1);
    }
    if (table->number_of_philosophers > 200) {
        fprintf(stderr, "Error: Maximum 200 philosophers allowed.\n");
        return (1);
    }
    return (0);
}

int init_table(t_table *table) {
    if (basic_rules_checker(table) || init_table_safeguard(table)) {
        return (1);
    }
    philos_setter(table);
    return (0);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   table_initializer.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: sueno-te <sueno-te@student.42sp.org.br>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 18:01:23 by sueno-te          #+#    #+#             */
/*   Updated: 2024/11/13 10:43:07 by sueno-te         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philosophers.h"

static  int basic_rules_checker(t_table *table);

int init_table(t_table *table)
{
    if (!basic_rules_checker(table) || !init_table_safeguard(table))
        return (-1);
    philos_setter(table);
}

static  int basic_rules_checker(t_table *table)
{
    if (table->number_of_philosophers < 2 || table->time_to_eat < 0
		|| table->time_to_sleep < 0 || table->number_of_philosophers > 200)
		return (-1)
    return (0);
}

#include "philosopher.h"

void *philosopher_routine(void *arg) {
    t_philo *philo = (t_philo *)arg;
    t_table *table = philo->table;

    while (1) {
        // Think
        printf("Philosopher %d is thinking\n", philo->id + 1); 

        // Take forks (with deadlock prevention)
        pthread_mutex_lock(&table->forks[philo->left_fork]);
        printf("Philosopher %d has taken left fork %d\n", philo->id + 1, philo->left_fork + 1);
        pthread_mutex_lock(&table->forks[philo->right_fork]);
        printf("Philosopher %d has taken right fork %d\n", philo->id + 1, philo->right_fork + 1);

        // Eat
        printf("Philosopher %d is eating\n", philo->id + 1);
        usleep(table->time_to_eat * 1000); // Simulate eating
        philo->eat_count++;

        // Release forks
        pthread_mutex_unlock(&table->forks[philo->right_fork]);
        pthread_mutex_unlock(&table->forks[philo->left_fork]);

        // Sleep
        printf("Philosopher %d is sleeping\n", philo->id + 1);
        usleep(table->time_to_sleep * 1000); // Simulate sleeping
    }

    return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   input_utils.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: sueno-te <sueno-te@student.42sp.org.br>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:34:45 by sueno-te          #+#    #+#             */
/*   Updated: 2024/11/13 11:02:37 by sueno-te         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

# include "philosopher.h"


int validate_input(int argc, char *input[]) {
    int i;
    
    if (argc < 5 || argc > 6) {
        fprintf(stderr, "Usage: %s <number_of_philosophers> <time_to_die> <time_to_eat> <time_to_sleep> [<number_of_times_each_philosopher_must_eat>]\n", input[0]);
        return (1);
    }
    i = 1;
    while (i < argc) {
        if (!only_digits(input[i])) {
            fprintf(stderr, "%s: Input ERROR\n", input[0]);
            return (1);
        }
        i++;
    }
    return (0);
}

void load_input(t_table *holder, char *input[]) {
    holder->number_of_philosophers = ft_atoi(input[1]);
    holder->time_to_die = ft_atoi(input[2]);
    holder->time_to_eat = ft_atoi(input[3]);
    holder->time_to_sleep = ft_atoi(input[4]);
    holder->all_ate = 0;
    holder->dead_count = 0;
    if (input[5]) {
        holder->eat_times = atoi(input[5]);
    } else {
        holder->eat_times = -1; 
    }
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: sueno-te <sueno-te@student.42sp.org.br>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 14:37:29 by sueno-te          #+#    #+#             */
/*   Updated: 2024/11/13 11:58:54 by sueno-te         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

# include "philosopher.h"

static int loading(t_table *holder, int argc, char *argv[]) {
    if (validate_input(argc, argv)) {
        fprintf(stderr, "%s : Input ERROR\n", argv[0]);
        return (1);
    }
    load_input(holder, argv);
    if (init_table(holder)) {
        fprintf(stderr, "%s : Initialization ERROR\n", argv[0]);
        return (1);
    }
    return (0); 
}

int main(int argc, char *argv[]) {
    t_table holder;
    int     i;

    if (loading(&holder, argc, argv)) {
        return (1);
    }
    
    i = 0;
    while (i < table.number_of_philosophers) {
        if (pthread_create(&table.philosopher[i].thread_id, NULL, philosopher_routine, &table.philosopher[i]) != 0) {
            perror("pthread_create");
            return (1);
        }
        i++;
    }

    i = 0;
    while (i < table.number_of_philosophers) {
        if (pthread_join(table.philosopher[i].thread_id, NULL) != 0) {
            perror("pthread_join");
            return (1);
        }
        i++;
    }

    return (0);
}