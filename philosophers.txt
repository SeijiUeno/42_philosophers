Here is the initial implemmentation of the 42 school philosopher project,
based on the classic Dining Philosophers problem, you task is to go step by step
checking the funtions a possible improvements

Source Code:
'''
# include <unistd.h>
# include <stdio.h> // fprintf function (forbidden to be removed WIP!)
# include <stdlib.h>
# include <pthread.h>
# include <sys/time.h>

# define INT_MAX 2147483647

typedef struct s_table t_table; // Forward declaration
typedef struct s_philo t_philo;

struct s_philo
{
    int             id;
    int             eat_count;
    long long       last_meal;
    int             left_fork;
    int             right_fork;
    pthread_t       thread_id;
    t_table         *table; 
};

struct s_table
{
    int             number_of_philosophers;
    int             time_to_die;
    int             time_to_eat;
    int             time_to_sleep;
    int             eat_times; 
    int             dead_count;
    int             all_ate;
    unsigned long   start_meal_time;
    t_philo         philosopher[201];
    pthread_mutex_t forks[201];
    pthread_mutex_t meal_check;
    pthread_mutex_t writing; 
};

int isspace(int c);
int ft_atoi(char *str)typedef;
int only_digits(char *str);
int basic_check(int argc, char *input[]);
void load_input(t_table *holder, char *input[]);

// philo init

void philos_setter(t_table *table);
int init_table_safeguard(t_table *table);

int isspace(int c) {
    if (c == ' ' || c == '\t' || c == '\n' || 
        c == '\r' || c == '\v' || c == '\f') 
    {
        return (1);
    }
    else 
    {
        return (0);
    }
}

int ft_atoi(char *str)
{
	unsigned long int	    number;
	int						i;

	i = 0;
	number = 0;
	while (str[i] && (str[i] >= '0' && str[i] <= '9'))
	{
		number = number * 10 + (str[i] - '0');
		i++;
	}
	if (number > INT_MAX)
		return (-1);
    i = (int)number;
	return (i);
}

int only_digits(char *str)
{
	int	i;

	i = 0;
    if (str[0] == '\0')
        return (0);
    while (isspace(str[i]))
    {
        i++;
    }
	while (str[i])
	{
		if (str[i] < '0' || str[i] > '9')
			return (0);
		i++;
	}
	return (1);
}

void philos_setter(t_table *table)
{
    int guests;
    int i;
    
    guests = table->number_of_philosophers;
    i = guests;
    while (--i >= 0)
    {
        table->philosopher[i].id = i;
        table->philosopher[i].eat_count = 0;
        table->philosopher[i].left_fork = i;
        table->philosopher[i].right_fork = (i+1) % guests;
        table->philosopher[i].last_meal = 0;
        table->philosopher[i].table = table;
    }
}

int init_table_safeguard(t_table *table)
{
    int i;
    
    if (pthread_mutex_init(&(table->writing), NULL))
        return (1);
    if (pthread_mutex_init(&(table->meal_check, NULL)))
        return (1);
    i = table->number_of_philosophers;
    while (--i >= 0)
    {
        if (pthread_mutex_init(&(table->forks[i], NULL)))
            return (1);
    }
    return (0);
}


int basic_check(int argc, char *input[])
{
    int i;

    i = 1;
    if (argc < 5 || argc > 6)
    {
        fprintf(stderr, "Usage: %s <number_of_philosophers> <time_to_die> <time_to_eat> <time_to_sleep> [<number_of_times_each_philosopher_must_eat>]\n", input[0]);
        return (1);
    }
    while (i < argc)
    {
        if (!only_digits(input[i]))
        {
            fprintf(stderr, "%s: Input ERROR\n", input[0]);
            return (0);
        }
        i++;
    }
    return (1);
}

void load_input(t_table *holder, char *input[])
{
    holder->number_of_philosophers = ft_atoi(input[1]);
    holder->time_to_die = ft_atoi(input[2]);
    holder->time_to_eat = ft_atoi(input[3]);
    holder->time_to_sleep = ft_atoi(input[4]);
    holder->all_ate = 0;
    holder->dead_count = 0;
    // Check for the optional argument
    if (input[5])
        holder->eat_times = ft_atoi(input[5]);
    else
        holder->eat_times = (-1);
}

# include "philosopher.h"

static int loading(t_table *holder, int argc, char *argv[])
{
    if (!basic_check(argc, argv))
    {
        fprintf(stderr, "%s : Basic_Check ERROR\n", argv[0]);
        return (0);
    }
    load_input(holder, argv);
    table_initializer(holder);
    return(1);
}

int main(int argc, char *argv[])
{
    t_table  holder;

    loading(&holder, argc, argv);
    return (0);
}
'''